# Maintainer: Float <floatingfloatskies@protonmail.com>
# Contributor: Narayan Silva <narayanlimasilva@gmail.com>

pkgname=comm-cosmic
pkgdesc="Meta package for Cosmic"
pkgver=20250323
pkgrel=1
arch=('any')
license=('MIT')
url="https://github.com/communitybig/${pkgname}"
source=("git+${url}.git#commit=COMMIT_HASH")
md5sums=('SKIP')
depends=(
    cosmic
    cosmic-greeter
)
optdepends=(
    # Dependências de portal e integração
    xdg-desktop-portal-gtk
    xdg-desktop-portal
    xdg-desktop-portal-xapp

    # Ferramentas e utilitários
    eza
    python-pip
    python-gobject
    python-screeninfo
    tumbler
    brightnessctl

    # Gerenciamento de rede
    nm-connection-editor
    network-manager-applet

    # Dependências GTK e temas
    gtk4
    gtk3
    libadwaita
    fuse2
    imagemagick
    jq
    xclip
    sync-gnome-theme-to-qt
    blueberry
    scrot
    qt5ct
    polkit-gnome
    polkit

    # Shells e complementos
    zsh
    zsh-completions
    fzf

    # Controle de som
    pavucontrol

    # Temas e ícones
    bigicons-papient
    papirus-icon-theme
    breeze-gtk
    xcursor-breeze
    nordic-darker-theme

    # Diretórios e sistemas de arquivos
    xdg-user-dirs-gtk
    gvfs
    gvfs-afc
    gvfs-mtp
    gvfs-goa
    gvfs-smb
    gvfs-gphoto2

    # Fontes
    otf-font-awesome
    ttf-fira-sans
    ttf-fira-code
    ttf-firacode-nerd
    ttf-dejavu
    ttf-nerd-fonts-symbols-with-biglinux

    # Personalizações
    oh-my-posh-bin
    checkupdates-with-aur
    unarchiver
    7zip
    imv
    ffmpegthumbnailer

    # Suporte multimídia e gráficos
    wireplumber
    qt5-svg
    qt5-graphicaleffects
    qt5-quickcontrols2

    # Flatpak
    flatpak

    # Áudio e PipeWire
    biglinux-meta-audio-config
    portaudio
    lib32-portaudio
    pipewire-alsa
    pipewire-pulse
    lib32-pipewire
    libpipewire
    lib32-libpipewire
    gst-plugin-pipewire
    manjaro-pipewire
    pcaudiolib
    sox

    # Outros utilitários
    libsndfile
    lib32-libsndfile
    xf86-input-elographics
    xf86-input-evdev
    xf86-input-libinput
    xf86-input-vmmouse
    xf86-input-void
    timeshift
    grub-btrfs-timeshift
    grub-btrfs
    amd-ucode
    libxcvt
    b43-fwcutter
    glxinfo
    gnome-disk-utility
    simplescreenrecorder
    python-pywal

    # Otimização de navegadores
    auto-tweaks-browser

    # Ferramentas específicas do Big Linux
    big-mount
    comm-base-config
    big-preload

    # Drivers de vídeo
    mhwd
    mhwd-db
    mhwd-biglinux
    mhwd-amdgpu
    mhwd-nvidia
    mhwd-ati
    mhwd-nvidia-470xx
    xf86-video-amdgpu
    vulkan-mesa-layers
    lib32-vulkan-mesa-layers
    vulkan-headers
    vulkan-tools
    vulkan-icd-loader
    lib32-vulkan-icd-loader
    vulkan-intel
    lib32-vulkan-intel
    vulkan-radeon
    lib32-vulkan-radeon
    mesa
    lib32-mesa

    # Wayland e componentes
    wayland

    # Componentes Cosmic
    cosmic
    cosmic-session
    cosmic-files
    cosmic-applets
    cosmic-app-library
    cosmic-bg
    cosmic-greeter
    cosmic-launcher
    cosmic-idle
    cosmic-notifications
    cosmic-osd
    cosmic-panel
    cosmic-settings-daemon
    cosmic-screenshot
    cosmic-terminal
    cosmic-settings
    cosmic-text-editor
    cosmic-workspaces
    cosmic-store
    xdg-desktop-portal-cosmic

    # Ferramentas extras e utilitários
    clang
    gnu-free-fonts
    harfbuzz-icu
    hyphen
    inotify-tools
    inxi
    libavif
    lsof
    ncdu
    sysstat
    chafa
    firefox
    evince
    libreoffice-fresh
    galculator
    xed
    pix
    mpv
)

package() {
    cd "${srcdir}/${pkgname}"

    mkdir -p "${pkgdir}/usr/share/${pkgname}"
    printf "%s\n" "${optdepends[@]}" >"${pkgdir}/usr/share/${pkgname}/optdepends"

    # Determinar o diretório correto da fonte
    if [ -d "${pkgname}" ]; then
        srcdir="${srcdir}/${pkgname}/${pkgname}"
    else
        srcdir="${srcdir}/${pkgname}"
    fi

    # Instalar arquivos
    local dirs=("usr" "etc" "opt")
    for dir in "${dirs[@]}"; do
        if [ -d "${srcdir}/${dir}" ]; then
            cp -a "${srcdir}/${dir}" "${pkgdir}/"
        fi
    done

    # Criar os diretórios necessários
    mkdir -p "${pkgdir}/etc/cosmic-greeter"
    mkdir -p "${pkgdir}/usr/share/backgrounds"
    mkdir -p "${pkgdir}/usr/share/libalpm/scripts"
    mkdir -p "${pkgdir}/usr/share/libalpm/hooks"

    # Instalar o arquivo de configuração do Cosmic Greeter
    echo "[Greeter]" > "${pkgdir}/etc/cosmic-greeter/config.toml"
    echo "background=/usr/share/backgrounds/owl_neighbourhood.jpg" >> "${pkgdir}/etc/cosmic-greeter/config.toml"

    # Verificar se há um wallpaper no repositório para copiar
    if [ -f "${srcdir}/owl_neighbourhood.jpg" ]; then
        install -Dm644 "${srcdir}/owl_neighbourhood.jpg" "${pkgdir}/usr/share/backgrounds/owl_neighbourhood.jpg"
    else
        echo "Warning: Wallpaper não encontrado, criando um placeholder."
        touch "${pkgdir}/usr/share/backgrounds/owl_neighbourhood.jpg"
    fi

    # Instalar o script e o hook
    cat > "${pkgdir}/usr/share/libalpm/scripts/change-files" << 'EOF'
#!/bin/bash

# Diretorios e Arquivos
configDir="/etc/cosmic-greeter"
backupDir="/etc/cosmic-greeter/backup"
configFile="${configDir}/config.toml"
backupFile="${backupDir}/config.toml.original"
customFile="${configDir}/config.toml.big"

# Criar diretório de backup se não existir
mkdir -p "${backupDir}"

# Fazer backup do arquivo original se existir e ainda não tiver backup
if [ -f "${configFile}" ] && [ ! -f "${backupFile}" ]; then
    cp "${configFile}" "${backupFile}"
    echo "Backup do Cosmic Greeter criado em ${backupFile}"
fi

# Verificar se o arquivo personalizado existe
if [ -f "${customFile}" ]; then
    # Copiar o arquivo personalizado
    cp "${customFile}" "${configFile}"
    echo "Configuração personalizada do cosmic-greeter aplicada com sucesso"
    
    # Definir permissões corretas
    chmod 644 "${configFile}"
    chown root:root "${configFile}"
else
    echo "ERRO: Arquivo personalizado não encontrado em ${customFile}" >&2
    exit 1
fi

exit 0
EOF

    chmod 755 "${pkgdir}/usr/share/libalpm/scripts/change-files"
    
    cat > "${pkgdir}/usr/share/libalpm/hooks/change-files.hook" << 'EOF'
[Trigger]
Type = Package
Operation = Install
Operation = Upgrade
Target = cosmic-greeter
Target = comm-cosmic

[Action]
Description = Configurando wallpaper personalizado no Cosmic Greeter
When = PostTransaction
Exec = /usr/share/libalpm/scripts/change-files
NeedsTargets
EOF

    # Instalar licença se disponível
    if [ -f "LICENSE" ]; then
        install -Dm644 LICENSE "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
    fi

    # Instalar documentação se disponível
    if [ -f "README.md" ]; then
        install -Dm644 README.md "${pkgdir}/usr/share/doc/${pkgname}/README.md"
    fi
}

